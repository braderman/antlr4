// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Interval.capnp

package org.antlr.v4.runtime.instrument;

public final class IntervalMessage {
  public static class Interval {
    public static final org.capnproto.StructSize STRUCT_SIZE = new org.capnproto.StructSize((short)1,(short)0);
    public static final class Factory extends org.capnproto.StructFactory<Builder, Reader> {
      public Factory() {
      }
      public final Reader constructReader(org.capnproto.SegmentReader segment, int data,int pointers, int dataSize, short pointerCount, int nestingLimit) {
        return new Reader(segment,data,pointers,dataSize,pointerCount,nestingLimit);
      }
      public final Builder constructBuilder(org.capnproto.SegmentBuilder segment, int data,int pointers, int dataSize, short pointerCount) {
        return new Builder(segment, data, pointers, dataSize, pointerCount);
      }
      public final org.capnproto.StructSize structSize() {
        return Interval.STRUCT_SIZE;
      }
      public final Reader asReader(Builder builder) {
        return builder.asReader();
      }
    }
    public static final Factory factory = new Factory();
    public static final org.capnproto.StructList.Factory<Builder,Reader> listFactory =
      new org.capnproto.StructList.Factory<Builder, Reader>(factory);
    public static final class Builder extends org.capnproto.StructBuilder {
      Builder(org.capnproto.SegmentBuilder segment, int data, int pointers,int dataSize, short pointerCount){
        super(segment, data, pointers, dataSize, pointerCount);
      }
      public final Reader asReader() {
        return new Reader(segment, data, pointers, dataSize, pointerCount, 0x7fffffff);
      }
      public final int getA() {
        return _getIntField(0);
      }
      public final void setA(int value) {
        _setIntField(0, value);
      }

      public final int getB() {
        return _getIntField(1);
      }
      public final void setB(int value) {
        _setIntField(1, value);
      }

    }

    public static final class Reader extends org.capnproto.StructReader {
      Reader(org.capnproto.SegmentReader segment, int data, int pointers,int dataSize, short pointerCount, int nestingLimit){
        super(segment, data, pointers, dataSize, pointerCount, nestingLimit);
      }

      public final int getA() {
        return _getIntField(0);
      }

      public final int getB() {
        return _getIntField(1);
      }

    }

  }


  public static class MethodOf {
    public static final org.capnproto.StructSize STRUCT_SIZE = new org.capnproto.StructSize((short)0,(short)2);
    public static final class Factory extends org.capnproto.StructFactory<Builder, Reader> {
      public Factory() {
      }
      public final Reader constructReader(org.capnproto.SegmentReader segment, int data,int pointers, int dataSize, short pointerCount, int nestingLimit) {
        return new Reader(segment,data,pointers,dataSize,pointerCount,nestingLimit);
      }
      public final Builder constructBuilder(org.capnproto.SegmentBuilder segment, int data,int pointers, int dataSize, short pointerCount) {
        return new Builder(segment, data, pointers, dataSize, pointerCount);
      }
      public final org.capnproto.StructSize structSize() {
        return MethodOf.STRUCT_SIZE;
      }
      public final Reader asReader(Builder builder) {
        return builder.asReader();
      }
    }
    public static final Factory factory = new Factory();
    public static final org.capnproto.StructList.Factory<Builder,Reader> listFactory =
      new org.capnproto.StructList.Factory<Builder, Reader>(factory);
    public static final class Builder extends org.capnproto.StructBuilder {
      Builder(org.capnproto.SegmentBuilder segment, int data, int pointers,int dataSize, short pointerCount){
        super(segment, data, pointers, dataSize, pointerCount);
      }
      public final Reader asReader() {
        return new Reader(segment, data, pointers, dataSize, pointerCount, 0x7fffffff);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getInput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 0, null, 0);
      }
      public final void setInput(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initInput() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, 0);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getOutput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 1, null, 0);
      }
      public final void setOutput(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initOutput() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1, 0);
      }
    }

    public static final class Reader extends org.capnproto.StructReader {
      Reader(org.capnproto.SegmentReader segment, int data, int pointers,int dataSize, short pointerCount, int nestingLimit){
        super(segment, data, pointers, dataSize, pointerCount, nestingLimit);
      }

      public boolean hasInput() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getInput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0,null, 0);
      }

      public boolean hasOutput() {
        return !_pointerFieldIsNull(1);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getOutput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1,null, 0);
      }

    }

  }


  public static class MethodStateIntOut {
    public static final org.capnproto.StructSize STRUCT_SIZE = new org.capnproto.StructSize((short)1,(short)1);
    public static final class Factory extends org.capnproto.StructFactory<Builder, Reader> {
      public Factory() {
      }
      public final Reader constructReader(org.capnproto.SegmentReader segment, int data,int pointers, int dataSize, short pointerCount, int nestingLimit) {
        return new Reader(segment,data,pointers,dataSize,pointerCount,nestingLimit);
      }
      public final Builder constructBuilder(org.capnproto.SegmentBuilder segment, int data,int pointers, int dataSize, short pointerCount) {
        return new Builder(segment, data, pointers, dataSize, pointerCount);
      }
      public final org.capnproto.StructSize structSize() {
        return MethodStateIntOut.STRUCT_SIZE;
      }
      public final Reader asReader(Builder builder) {
        return builder.asReader();
      }
    }
    public static final Factory factory = new Factory();
    public static final org.capnproto.StructList.Factory<Builder,Reader> listFactory =
      new org.capnproto.StructList.Factory<Builder, Reader>(factory);
    public static final class Builder extends org.capnproto.StructBuilder {
      Builder(org.capnproto.SegmentBuilder segment, int data, int pointers,int dataSize, short pointerCount){
        super(segment, data, pointers, dataSize, pointerCount);
      }
      public final Reader asReader() {
        return new Reader(segment, data, pointers, dataSize, pointerCount, 0x7fffffff);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getState() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 0, null, 0);
      }
      public final void setState(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initState() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, 0);
      }
      public final int getOutput() {
        return _getIntField(0);
      }
      public final void setOutput(int value) {
        _setIntField(0, value);
      }

    }

    public static final class Reader extends org.capnproto.StructReader {
      Reader(org.capnproto.SegmentReader segment, int data, int pointers,int dataSize, short pointerCount, int nestingLimit){
        super(segment, data, pointers, dataSize, pointerCount, nestingLimit);
      }

      public boolean hasState() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getState() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0,null, 0);
      }

      public final int getOutput() {
        return _getIntField(0);
      }

    }

  }


  public static class MethodStateStringOut {
    public static final org.capnproto.StructSize STRUCT_SIZE = new org.capnproto.StructSize((short)0,(short)2);
    public static final class Factory extends org.capnproto.StructFactory<Builder, Reader> {
      public Factory() {
      }
      public final Reader constructReader(org.capnproto.SegmentReader segment, int data,int pointers, int dataSize, short pointerCount, int nestingLimit) {
        return new Reader(segment,data,pointers,dataSize,pointerCount,nestingLimit);
      }
      public final Builder constructBuilder(org.capnproto.SegmentBuilder segment, int data,int pointers, int dataSize, short pointerCount) {
        return new Builder(segment, data, pointers, dataSize, pointerCount);
      }
      public final org.capnproto.StructSize structSize() {
        return MethodStateStringOut.STRUCT_SIZE;
      }
      public final Reader asReader(Builder builder) {
        return builder.asReader();
      }
    }
    public static final Factory factory = new Factory();
    public static final org.capnproto.StructList.Factory<Builder,Reader> listFactory =
      new org.capnproto.StructList.Factory<Builder, Reader>(factory);
    public static final class Builder extends org.capnproto.StructBuilder {
      Builder(org.capnproto.SegmentBuilder segment, int data, int pointers,int dataSize, short pointerCount){
        super(segment, data, pointers, dataSize, pointerCount);
      }
      public final Reader asReader() {
        return new Reader(segment, data, pointers, dataSize, pointerCount, 0x7fffffff);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getState() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 0, null, 0);
      }
      public final void setState(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initState() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, 0);
      }
      public final boolean hasOutput() {
        return !_pointerFieldIsNull(1);
      }
      public final org.capnproto.Text.Builder getOutput() {
        return _getPointerField(org.capnproto.Text.factory, 1, null, 0, 0);
      }
      public final void setOutput(org.capnproto.Text.Reader value) {
        _setPointerField(org.capnproto.Text.factory, 1, value);
      }
      public final void setOutput(String value) {
        _setPointerField(org.capnproto.Text.factory, 1, new org.capnproto.Text.Reader(value));
      }
      public final org.capnproto.Text.Builder initOutput(int size) {
        return _initPointerField(org.capnproto.Text.factory, 1, size);
      }
    }

    public static final class Reader extends org.capnproto.StructReader {
      Reader(org.capnproto.SegmentReader segment, int data, int pointers,int dataSize, short pointerCount, int nestingLimit){
        super(segment, data, pointers, dataSize, pointerCount, nestingLimit);
      }

      public boolean hasState() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getState() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0,null, 0);
      }

      public boolean hasOutput() {
        return !_pointerFieldIsNull(1);
      }
      public org.capnproto.Text.Reader getOutput() {
        return _getPointerField(org.capnproto.Text.factory, 1, null, 0, 0);
      }

    }

  }


  public static class MethodStateIntervalInBoolOut {
    public static final org.capnproto.StructSize STRUCT_SIZE = new org.capnproto.StructSize((short)1,(short)2);
    public static final class Factory extends org.capnproto.StructFactory<Builder, Reader> {
      public Factory() {
      }
      public final Reader constructReader(org.capnproto.SegmentReader segment, int data,int pointers, int dataSize, short pointerCount, int nestingLimit) {
        return new Reader(segment,data,pointers,dataSize,pointerCount,nestingLimit);
      }
      public final Builder constructBuilder(org.capnproto.SegmentBuilder segment, int data,int pointers, int dataSize, short pointerCount) {
        return new Builder(segment, data, pointers, dataSize, pointerCount);
      }
      public final org.capnproto.StructSize structSize() {
        return MethodStateIntervalInBoolOut.STRUCT_SIZE;
      }
      public final Reader asReader(Builder builder) {
        return builder.asReader();
      }
    }
    public static final Factory factory = new Factory();
    public static final org.capnproto.StructList.Factory<Builder,Reader> listFactory =
      new org.capnproto.StructList.Factory<Builder, Reader>(factory);
    public static final class Builder extends org.capnproto.StructBuilder {
      Builder(org.capnproto.SegmentBuilder segment, int data, int pointers,int dataSize, short pointerCount){
        super(segment, data, pointers, dataSize, pointerCount);
      }
      public final Reader asReader() {
        return new Reader(segment, data, pointers, dataSize, pointerCount, 0x7fffffff);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getState() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 0, null, 0);
      }
      public final void setState(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initState() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, 0);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getInput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 1, null, 0);
      }
      public final void setInput(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initInput() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1, 0);
      }
      public final boolean getOutput() {
        return _getBooleanField(0);
      }
      public final void setOutput(boolean value) {
        _setBooleanField(0, value);
      }

    }

    public static final class Reader extends org.capnproto.StructReader {
      Reader(org.capnproto.SegmentReader segment, int data, int pointers,int dataSize, short pointerCount, int nestingLimit){
        super(segment, data, pointers, dataSize, pointerCount, nestingLimit);
      }

      public boolean hasState() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getState() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0,null, 0);
      }

      public boolean hasInput() {
        return !_pointerFieldIsNull(1);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getInput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1,null, 0);
      }

      public final boolean getOutput() {
        return _getBooleanField(0);
      }

    }

  }


  public static class MethodStateIntervalInIntervalOut {
    public static final org.capnproto.StructSize STRUCT_SIZE = new org.capnproto.StructSize((short)0,(short)3);
    public static final class Factory extends org.capnproto.StructFactory<Builder, Reader> {
      public Factory() {
      }
      public final Reader constructReader(org.capnproto.SegmentReader segment, int data,int pointers, int dataSize, short pointerCount, int nestingLimit) {
        return new Reader(segment,data,pointers,dataSize,pointerCount,nestingLimit);
      }
      public final Builder constructBuilder(org.capnproto.SegmentBuilder segment, int data,int pointers, int dataSize, short pointerCount) {
        return new Builder(segment, data, pointers, dataSize, pointerCount);
      }
      public final org.capnproto.StructSize structSize() {
        return MethodStateIntervalInIntervalOut.STRUCT_SIZE;
      }
      public final Reader asReader(Builder builder) {
        return builder.asReader();
      }
    }
    public static final Factory factory = new Factory();
    public static final org.capnproto.StructList.Factory<Builder,Reader> listFactory =
      new org.capnproto.StructList.Factory<Builder, Reader>(factory);
    public static final class Builder extends org.capnproto.StructBuilder {
      Builder(org.capnproto.SegmentBuilder segment, int data, int pointers,int dataSize, short pointerCount){
        super(segment, data, pointers, dataSize, pointerCount);
      }
      public final Reader asReader() {
        return new Reader(segment, data, pointers, dataSize, pointerCount, 0x7fffffff);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getState() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 0, null, 0);
      }
      public final void setState(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initState() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0, 0);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getInput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 1, null, 0);
      }
      public final void setInput(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initInput() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1, 0);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder getOutput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory, 2, null, 0);
      }
      public final void setOutput(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader value) {
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,2, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Builder initOutput() {
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,2, 0);
      }
    }

    public static final class Reader extends org.capnproto.StructReader {
      Reader(org.capnproto.SegmentReader segment, int data, int pointers,int dataSize, short pointerCount, int nestingLimit){
        super(segment, data, pointers, dataSize, pointerCount, nestingLimit);
      }

      public boolean hasState() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getState() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,0,null, 0);
      }

      public boolean hasInput() {
        return !_pointerFieldIsNull(1);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getInput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,1,null, 0);
      }

      public boolean hasOutput() {
        return !_pointerFieldIsNull(2);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.Interval.Reader getOutput() {
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.Interval.factory,2,null, 0);
      }

    }

  }


  public static class IntervalMethods {
    public static final org.capnproto.StructSize STRUCT_SIZE = new org.capnproto.StructSize((short)1,(short)1);
    public static final class Factory extends org.capnproto.StructFactory<Builder, Reader> {
      public Factory() {
      }
      public final Reader constructReader(org.capnproto.SegmentReader segment, int data,int pointers, int dataSize, short pointerCount, int nestingLimit) {
        return new Reader(segment,data,pointers,dataSize,pointerCount,nestingLimit);
      }
      public final Builder constructBuilder(org.capnproto.SegmentBuilder segment, int data,int pointers, int dataSize, short pointerCount) {
        return new Builder(segment, data, pointers, dataSize, pointerCount);
      }
      public final org.capnproto.StructSize structSize() {
        return IntervalMethods.STRUCT_SIZE;
      }
      public final Reader asReader(Builder builder) {
        return builder.asReader();
      }
    }
    public static final Factory factory = new Factory();
    public static final org.capnproto.StructList.Factory<Builder,Reader> listFactory =
      new org.capnproto.StructList.Factory<Builder, Reader>(factory);
    public static final class Builder extends org.capnproto.StructBuilder {
      Builder(org.capnproto.SegmentBuilder segment, int data, int pointers,int dataSize, short pointerCount){
        super(segment, data, pointers, dataSize, pointerCount);
      }
      public Which which() {
        switch(_getShortField(0)) {
          case 0 : return Which.INTERVAL_OF;
          case 1 : return Which.LENGTH;
          case 2 : return Which.HASH_CODE;
          case 3 : return Which.STARTS_BEFORE_DISJOINT;
          case 4 : return Which.STARTS_BEFORE_NON_DISJOINT;
          case 5 : return Which.STARTS_AFTER;
          case 6 : return Which.STARTS_AFTER_DISJOINT;
          case 7 : return Which.STARTS_AFTER_NON_DISJOINT;
          case 8 : return Which.DISJOINT;
          case 9 : return Which.ADJACENT;
          case 10 : return Which.PROPERLY_CONTAINS;
          case 11 : return Which.METH_UNION;
          case 12 : return Which.INTERSECTION;
          case 13 : return Which.DIFFERENCE_NOT_PROPERLY_CONTAINED;
          case 14 : return Which.TO_STRING;
          default: return Which._NOT_IN_SCHEMA;
        }
      }
      public final Reader asReader() {
        return new Reader(segment, data, pointers, dataSize, pointerCount, 0x7fffffff);
      }
      public final boolean isIntervalOf() {
        return which() == IntervalMethods.Which.INTERVAL_OF;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodOf.Builder getIntervalOf() {
        assert which() == IntervalMethods.Which.INTERVAL_OF:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodOf.factory, 0, null, 0);
      }
      public final void setIntervalOf(org.antlr.v4.runtime.instrument.IntervalMessage.MethodOf.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.INTERVAL_OF.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodOf.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodOf.Builder initIntervalOf() {
        _setShortField(0, (short)IntervalMethods.Which.INTERVAL_OF.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodOf.factory,0, 0);
      }
      public final boolean isLength() {
        return which() == IntervalMethods.Which.LENGTH;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.Builder getLength() {
        assert which() == IntervalMethods.Which.LENGTH:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.factory, 0, null, 0);
      }
      public final void setLength(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.LENGTH.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.Builder initLength() {
        _setShortField(0, (short)IntervalMethods.Which.LENGTH.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.factory,0, 0);
      }
      public final boolean isHashCode() {
        return which() == IntervalMethods.Which.HASH_CODE;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.Builder getHashCode() {
        assert which() == IntervalMethods.Which.HASH_CODE:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.factory, 0, null, 0);
      }
      public final void setHashCode(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.HASH_CODE.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.Builder initHashCode() {
        _setShortField(0, (short)IntervalMethods.Which.HASH_CODE.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.factory,0, 0);
      }
      public final boolean isStartsBeforeDisjoint() {
        return which() == IntervalMethods.Which.STARTS_BEFORE_DISJOINT;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder getStartsBeforeDisjoint() {
        assert which() == IntervalMethods.Which.STARTS_BEFORE_DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory, 0, null, 0);
      }
      public final void setStartsBeforeDisjoint(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_BEFORE_DISJOINT.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder initStartsBeforeDisjoint() {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_BEFORE_DISJOINT.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, 0);
      }
      public final boolean isStartsBeforeNonDisjoint() {
        return which() == IntervalMethods.Which.STARTS_BEFORE_NON_DISJOINT;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder getStartsBeforeNonDisjoint() {
        assert which() == IntervalMethods.Which.STARTS_BEFORE_NON_DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory, 0, null, 0);
      }
      public final void setStartsBeforeNonDisjoint(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_BEFORE_NON_DISJOINT.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder initStartsBeforeNonDisjoint() {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_BEFORE_NON_DISJOINT.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, 0);
      }
      public final boolean isStartsAfter() {
        return which() == IntervalMethods.Which.STARTS_AFTER;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder getStartsAfter() {
        assert which() == IntervalMethods.Which.STARTS_AFTER:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory, 0, null, 0);
      }
      public final void setStartsAfter(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_AFTER.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder initStartsAfter() {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_AFTER.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, 0);
      }
      public final boolean isStartsAfterDisjoint() {
        return which() == IntervalMethods.Which.STARTS_AFTER_DISJOINT;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder getStartsAfterDisjoint() {
        assert which() == IntervalMethods.Which.STARTS_AFTER_DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory, 0, null, 0);
      }
      public final void setStartsAfterDisjoint(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_AFTER_DISJOINT.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder initStartsAfterDisjoint() {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_AFTER_DISJOINT.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, 0);
      }
      public final boolean isStartsAfterNonDisjoint() {
        return which() == IntervalMethods.Which.STARTS_AFTER_NON_DISJOINT;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder getStartsAfterNonDisjoint() {
        assert which() == IntervalMethods.Which.STARTS_AFTER_NON_DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory, 0, null, 0);
      }
      public final void setStartsAfterNonDisjoint(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_AFTER_NON_DISJOINT.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder initStartsAfterNonDisjoint() {
        _setShortField(0, (short)IntervalMethods.Which.STARTS_AFTER_NON_DISJOINT.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, 0);
      }
      public final boolean isDisjoint() {
        return which() == IntervalMethods.Which.DISJOINT;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder getDisjoint() {
        assert which() == IntervalMethods.Which.DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory, 0, null, 0);
      }
      public final void setDisjoint(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.DISJOINT.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder initDisjoint() {
        _setShortField(0, (short)IntervalMethods.Which.DISJOINT.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, 0);
      }
      public final boolean isAdjacent() {
        return which() == IntervalMethods.Which.ADJACENT;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder getAdjacent() {
        assert which() == IntervalMethods.Which.ADJACENT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory, 0, null, 0);
      }
      public final void setAdjacent(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.ADJACENT.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder initAdjacent() {
        _setShortField(0, (short)IntervalMethods.Which.ADJACENT.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, 0);
      }
      public final boolean isProperlyContains() {
        return which() == IntervalMethods.Which.PROPERLY_CONTAINS;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder getProperlyContains() {
        assert which() == IntervalMethods.Which.PROPERLY_CONTAINS:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory, 0, null, 0);
      }
      public final void setProperlyContains(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.PROPERLY_CONTAINS.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Builder initProperlyContains() {
        _setShortField(0, (short)IntervalMethods.Which.PROPERLY_CONTAINS.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0, 0);
      }
      public final boolean isMethUnion() {
        return which() == IntervalMethods.Which.METH_UNION;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Builder getMethUnion() {
        assert which() == IntervalMethods.Which.METH_UNION:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory, 0, null, 0);
      }
      public final void setMethUnion(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.METH_UNION.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Builder initMethUnion() {
        _setShortField(0, (short)IntervalMethods.Which.METH_UNION.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0, 0);
      }
      public final boolean isIntersection() {
        return which() == IntervalMethods.Which.INTERSECTION;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Builder getIntersection() {
        assert which() == IntervalMethods.Which.INTERSECTION:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory, 0, null, 0);
      }
      public final void setIntersection(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.INTERSECTION.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Builder initIntersection() {
        _setShortField(0, (short)IntervalMethods.Which.INTERSECTION.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0, 0);
      }
      public final boolean isDifferenceNotProperlyContained() {
        return which() == IntervalMethods.Which.DIFFERENCE_NOT_PROPERLY_CONTAINED;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Builder getDifferenceNotProperlyContained() {
        assert which() == IntervalMethods.Which.DIFFERENCE_NOT_PROPERLY_CONTAINED:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory, 0, null, 0);
      }
      public final void setDifferenceNotProperlyContained(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.DIFFERENCE_NOT_PROPERLY_CONTAINED.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Builder initDifferenceNotProperlyContained() {
        _setShortField(0, (short)IntervalMethods.Which.DIFFERENCE_NOT_PROPERLY_CONTAINED.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0, 0);
      }
      public final boolean isToString() {
        return which() == IntervalMethods.Which.TO_STRING;
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateStringOut.Builder getToString() {
        assert which() == IntervalMethods.Which.TO_STRING:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateStringOut.factory, 0, null, 0);
      }
      public final void setToString(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateStringOut.Reader value) {
        _setShortField(0, (short)IntervalMethods.Which.TO_STRING.ordinal());
        _setPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateStringOut.factory,0, value);
      }
      public final org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateStringOut.Builder initToString() {
        _setShortField(0, (short)IntervalMethods.Which.TO_STRING.ordinal());
        return _initPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateStringOut.factory,0, 0);
      }
    }

    public static final class Reader extends org.capnproto.StructReader {
      Reader(org.capnproto.SegmentReader segment, int data, int pointers,int dataSize, short pointerCount, int nestingLimit){
        super(segment, data, pointers, dataSize, pointerCount, nestingLimit);
      }

      public Which which() {
        switch(_getShortField(0)) {
          case 0 : return Which.INTERVAL_OF;
          case 1 : return Which.LENGTH;
          case 2 : return Which.HASH_CODE;
          case 3 : return Which.STARTS_BEFORE_DISJOINT;
          case 4 : return Which.STARTS_BEFORE_NON_DISJOINT;
          case 5 : return Which.STARTS_AFTER;
          case 6 : return Which.STARTS_AFTER_DISJOINT;
          case 7 : return Which.STARTS_AFTER_NON_DISJOINT;
          case 8 : return Which.DISJOINT;
          case 9 : return Which.ADJACENT;
          case 10 : return Which.PROPERLY_CONTAINS;
          case 11 : return Which.METH_UNION;
          case 12 : return Which.INTERSECTION;
          case 13 : return Which.DIFFERENCE_NOT_PROPERLY_CONTAINED;
          case 14 : return Which.TO_STRING;
          default: return Which._NOT_IN_SCHEMA;
        }
      }
      public final boolean isIntervalOf() {
        return which() == IntervalMethods.Which.INTERVAL_OF;
      }
      public boolean hasIntervalOf() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodOf.Reader getIntervalOf() {
        assert which() == IntervalMethods.Which.INTERVAL_OF:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodOf.factory,0,null, 0);
      }

      public final boolean isLength() {
        return which() == IntervalMethods.Which.LENGTH;
      }
      public boolean hasLength() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.Reader getLength() {
        assert which() == IntervalMethods.Which.LENGTH:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.factory,0,null, 0);
      }

      public final boolean isHashCode() {
        return which() == IntervalMethods.Which.HASH_CODE;
      }
      public boolean hasHashCode() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.Reader getHashCode() {
        assert which() == IntervalMethods.Which.HASH_CODE:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntOut.factory,0,null, 0);
      }

      public final boolean isStartsBeforeDisjoint() {
        return which() == IntervalMethods.Which.STARTS_BEFORE_DISJOINT;
      }
      public boolean hasStartsBeforeDisjoint() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader getStartsBeforeDisjoint() {
        assert which() == IntervalMethods.Which.STARTS_BEFORE_DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0,null, 0);
      }

      public final boolean isStartsBeforeNonDisjoint() {
        return which() == IntervalMethods.Which.STARTS_BEFORE_NON_DISJOINT;
      }
      public boolean hasStartsBeforeNonDisjoint() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader getStartsBeforeNonDisjoint() {
        assert which() == IntervalMethods.Which.STARTS_BEFORE_NON_DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0,null, 0);
      }

      public final boolean isStartsAfter() {
        return which() == IntervalMethods.Which.STARTS_AFTER;
      }
      public boolean hasStartsAfter() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader getStartsAfter() {
        assert which() == IntervalMethods.Which.STARTS_AFTER:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0,null, 0);
      }

      public final boolean isStartsAfterDisjoint() {
        return which() == IntervalMethods.Which.STARTS_AFTER_DISJOINT;
      }
      public boolean hasStartsAfterDisjoint() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader getStartsAfterDisjoint() {
        assert which() == IntervalMethods.Which.STARTS_AFTER_DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0,null, 0);
      }

      public final boolean isStartsAfterNonDisjoint() {
        return which() == IntervalMethods.Which.STARTS_AFTER_NON_DISJOINT;
      }
      public boolean hasStartsAfterNonDisjoint() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader getStartsAfterNonDisjoint() {
        assert which() == IntervalMethods.Which.STARTS_AFTER_NON_DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0,null, 0);
      }

      public final boolean isDisjoint() {
        return which() == IntervalMethods.Which.DISJOINT;
      }
      public boolean hasDisjoint() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader getDisjoint() {
        assert which() == IntervalMethods.Which.DISJOINT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0,null, 0);
      }

      public final boolean isAdjacent() {
        return which() == IntervalMethods.Which.ADJACENT;
      }
      public boolean hasAdjacent() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader getAdjacent() {
        assert which() == IntervalMethods.Which.ADJACENT:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0,null, 0);
      }

      public final boolean isProperlyContains() {
        return which() == IntervalMethods.Which.PROPERLY_CONTAINS;
      }
      public boolean hasProperlyContains() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.Reader getProperlyContains() {
        assert which() == IntervalMethods.Which.PROPERLY_CONTAINS:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInBoolOut.factory,0,null, 0);
      }

      public final boolean isMethUnion() {
        return which() == IntervalMethods.Which.METH_UNION;
      }
      public boolean hasMethUnion() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Reader getMethUnion() {
        assert which() == IntervalMethods.Which.METH_UNION:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0,null, 0);
      }

      public final boolean isIntersection() {
        return which() == IntervalMethods.Which.INTERSECTION;
      }
      public boolean hasIntersection() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Reader getIntersection() {
        assert which() == IntervalMethods.Which.INTERSECTION:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0,null, 0);
      }

      public final boolean isDifferenceNotProperlyContained() {
        return which() == IntervalMethods.Which.DIFFERENCE_NOT_PROPERLY_CONTAINED;
      }
      public boolean hasDifferenceNotProperlyContained() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.Reader getDifferenceNotProperlyContained() {
        assert which() == IntervalMethods.Which.DIFFERENCE_NOT_PROPERLY_CONTAINED:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateIntervalInIntervalOut.factory,0,null, 0);
      }

      public final boolean isToString() {
        return which() == IntervalMethods.Which.TO_STRING;
      }
      public boolean hasToString() {
        return !_pointerFieldIsNull(0);
      }
      public org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateStringOut.Reader getToString() {
        assert which() == IntervalMethods.Which.TO_STRING:
                    "Must check which() before get()ing a union member.";
        return _getPointerField(org.antlr.v4.runtime.instrument.IntervalMessage.MethodStateStringOut.factory,0,null, 0);
      }

    }

    public enum Which {
      INTERVAL_OF,
      LENGTH,
      HASH_CODE,
      STARTS_BEFORE_DISJOINT,
      STARTS_BEFORE_NON_DISJOINT,
      STARTS_AFTER,
      STARTS_AFTER_DISJOINT,
      STARTS_AFTER_NON_DISJOINT,
      DISJOINT,
      ADJACENT,
      PROPERLY_CONTAINS,
      METH_UNION,
      INTERSECTION,
      DIFFERENCE_NOT_PROPERLY_CONTAINED,
      TO_STRING,
      _NOT_IN_SCHEMA,
    }
  }



public static final class Schemas {
public static final org.capnproto.SegmentReader b_bbc00ac21e405e2e =
   org.capnproto.GeneratedClassSupport.decodeRawBytes(
   "\u0000\u0000\u0000\u0000\u0005\u0000\u0006\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u000f\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u00e2\u0058\u00ba\u002d\u009b\u00b1\u006a\u0094" +
   "\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0015\u0000\u0000\u0000\u00c2\u0000\u0000\u0000" +
   "\u001d\u0000\u0000\u0000\u0007\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0019\u0000\u0000\u0000\u0077\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u006e\u0074\u0065\u0072\u0076\u0061\u006c" +
   "\u002e\u0063\u0061\u0070\u006e\u0070\u003a\u0049" +
   "\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0000" +
   "\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u0008\u0000\u0000\u0000\u0003\u0000\u0004\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0029\u0000\u0000\u0000\u0012\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0024\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0030\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002d\u0000\u0000\u0000\u0012\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0028\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0034\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0061\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0062\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" + "");
public static final org.capnproto.SegmentReader b_fc0ec1e6c1e84448 =
   org.capnproto.GeneratedClassSupport.decodeRawBytes(
   "\u0000\u0000\u0000\u0000\u0005\u0000\u0006\u0000" +
   "\u0048\u0044\u00e8\u00c1\u00e6\u00c1\u000e\u00fc" +
   "\u000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000" +
   "\u00e2\u0058\u00ba\u002d\u009b\u00b1\u006a\u0094" +
   "\u0002\u0000\u0007\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0015\u0000\u0000\u0000\u00c2\u0000\u0000\u0000" +
   "\u001d\u0000\u0000\u0000\u0007\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0019\u0000\u0000\u0000\u0077\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u006e\u0074\u0065\u0072\u0076\u0061\u006c" +
   "\u002e\u0063\u0061\u0070\u006e\u0070\u003a\u004d" +
   "\u0065\u0074\u0068\u006f\u0064\u004f\u0066\u0000" +
   "\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u0008\u0000\u0000\u0000\u0003\u0000\u0004\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0029\u0000\u0000\u0000\u0032\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0024\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0030\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002d\u0000\u0000\u0000\u003a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0028\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0034\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0069\u006e\u0070\u0075\u0074\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u006f\u0075\u0074\u0070\u0075\u0074\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" + "");
public static final org.capnproto.SegmentReader b_b6bfc9c105df6fec =
   org.capnproto.GeneratedClassSupport.decodeRawBytes(
   "\u0000\u0000\u0000\u0000\u0005\u0000\u0006\u0000" +
   "\u00ec\u006f\u00df\u0005\u00c1\u00c9\u00bf\u00b6" +
   "\u000f\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u00e2\u0058\u00ba\u002d\u009b\u00b1\u006a\u0094" +
   "\u0001\u0000\u0007\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0015\u0000\u0000\u0000\n\u0001\u0000\u0000" +
   "\u0025\u0000\u0000\u0000\u0007\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0021\u0000\u0000\u0000\u0077\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u006e\u0074\u0065\u0072\u0076\u0061\u006c" +
   "\u002e\u0063\u0061\u0070\u006e\u0070\u003a\u004d" +
   "\u0065\u0074\u0068\u006f\u0064\u0053\u0074\u0061" +
   "\u0074\u0065\u0049\u006e\u0074\u004f\u0075\u0074" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u0008\u0000\u0000\u0000\u0003\u0000\u0004\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0029\u0000\u0000\u0000\u0032\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0024\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0030\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002d\u0000\u0000\u0000\u003a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0028\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0034\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0073\u0074\u0061\u0074\u0065\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u006f\u0075\u0074\u0070\u0075\u0074\u0000\u0000" +
   "\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" + "");
public static final org.capnproto.SegmentReader b_ec9fdb975e36689c =
   org.capnproto.GeneratedClassSupport.decodeRawBytes(
   "\u0000\u0000\u0000\u0000\u0005\u0000\u0006\u0000" +
   "\u009c\u0068\u0036\u005e\u0097\u00db\u009f\u00ec" +
   "\u000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000" +
   "\u00e2\u0058\u00ba\u002d\u009b\u00b1\u006a\u0094" +
   "\u0002\u0000\u0007\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0015\u0000\u0000\u0000\"\u0001\u0000\u0000" +
   "\u0025\u0000\u0000\u0000\u0007\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0021\u0000\u0000\u0000\u0077\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u006e\u0074\u0065\u0072\u0076\u0061\u006c" +
   "\u002e\u0063\u0061\u0070\u006e\u0070\u003a\u004d" +
   "\u0065\u0074\u0068\u006f\u0064\u0053\u0074\u0061" +
   "\u0074\u0065\u0053\u0074\u0072\u0069\u006e\u0067" +
   "\u004f\u0075\u0074\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u0008\u0000\u0000\u0000\u0003\u0000\u0004\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0029\u0000\u0000\u0000\u0032\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0024\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0030\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002d\u0000\u0000\u0000\u003a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0028\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0034\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0073\u0074\u0061\u0074\u0065\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u006f\u0075\u0074\u0070\u0075\u0074\u0000\u0000" +
   "\u000c\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u000c\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" + "");
public static final org.capnproto.SegmentReader b_8cc713777d6d20e1 =
   org.capnproto.GeneratedClassSupport.decodeRawBytes(
   "\u0000\u0000\u0000\u0000\u0005\u0000\u0006\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u000f\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u00e2\u0058\u00ba\u002d\u009b\u00b1\u006a\u0094" +
   "\u0002\u0000\u0007\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0015\u0000\u0000\u0000\u0062\u0001\u0000\u0000" +
   "\u0029\u0000\u0000\u0000\u0007\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0025\u0000\u0000\u0000\u00af\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u006e\u0074\u0065\u0072\u0076\u0061\u006c" +
   "\u002e\u0063\u0061\u0070\u006e\u0070\u003a\u004d" +
   "\u0065\u0074\u0068\u006f\u0064\u0053\u0074\u0061" +
   "\u0074\u0065\u0049\u006e\u0074\u0065\u0072\u0076" +
   "\u0061\u006c\u0049\u006e\u0042\u006f\u006f\u006c" +
   "\u004f\u0075\u0074\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u000c\u0000\u0000\u0000\u0003\u0000\u0004\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0045\u0000\u0000\u0000\u0032\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0040\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u004c\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u0000\u0000\u0000\u0032\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0044\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0050\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u004d\u0000\u0000\u0000\u003a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0048\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0054\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0073\u0074\u0061\u0074\u0065\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0069\u006e\u0070\u0075\u0074\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u006f\u0075\u0074\u0070\u0075\u0074\u0000\u0000" +
   "\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" + "");
public static final org.capnproto.SegmentReader b_cab782f69075a59e =
   org.capnproto.GeneratedClassSupport.decodeRawBytes(
   "\u0000\u0000\u0000\u0000\u0005\u0000\u0006\u0000" +
   "\u009e\u00a5\u0075\u0090\u00f6\u0082\u00b7\u00ca" +
   "\u000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000" +
   "\u00e2\u0058\u00ba\u002d\u009b\u00b1\u006a\u0094" +
   "\u0003\u0000\u0007\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0015\u0000\u0000\u0000\u0082\u0001\u0000\u0000" +
   "\u0029\u0000\u0000\u0000\u0007\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0025\u0000\u0000\u0000\u00af\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u006e\u0074\u0065\u0072\u0076\u0061\u006c" +
   "\u002e\u0063\u0061\u0070\u006e\u0070\u003a\u004d" +
   "\u0065\u0074\u0068\u006f\u0064\u0053\u0074\u0061" +
   "\u0074\u0065\u0049\u006e\u0074\u0065\u0072\u0076" +
   "\u0061\u006c\u0049\u006e\u0049\u006e\u0074\u0065" +
   "\u0072\u0076\u0061\u006c\u004f\u0075\u0074\u0000" +
   "\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u000c\u0000\u0000\u0000\u0003\u0000\u0004\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0045\u0000\u0000\u0000\u0032\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0040\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u004c\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u0000\u0000\u0000\u0032\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0044\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0050\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0002\u0000\u0000\u0000\u0002\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u004d\u0000\u0000\u0000\u003a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0048\u0000\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0054\u0000\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0073\u0074\u0061\u0074\u0065\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0069\u006e\u0070\u0075\u0074\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u006f\u0075\u0074\u0070\u0075\u0074\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u002e\u005e\u0040\u001e\u00c2\n\u00c0\u00bb" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" + "");
public static final org.capnproto.SegmentReader b_e7c7b0f79fc46d21 =
   org.capnproto.GeneratedClassSupport.decodeRawBytes(
   "\u0000\u0000\u0000\u0000\u0005\u0000\u0006\u0000" +
   "\u0021\u006d\u00c4\u009f\u00f7\u00b0\u00c7\u00e7" +
   "\u000f\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u00e2\u0058\u00ba\u002d\u009b\u00b1\u006a\u0094" +
   "\u0001\u0000\u0007\u0000\u0000\u0000\u000f\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0015\u0000\u0000\u0000\u00fa\u0000\u0000\u0000" +
   "\u0021\u0000\u0000\u0000\u0007\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u001d\u0000\u0000\u0000\u004f\u0003\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0049\u006e\u0074\u0065\u0072\u0076\u0061\u006c" +
   "\u002e\u0063\u0061\u0070\u006e\u0070\u003a\u0049" +
   "\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u004d" +
   "\u0065\u0074\u0068\u006f\u0064\u0073\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000" +
   "\u003c\u0000\u0000\u0000\u0003\u0000\u0004\u0000" +
   "\u0000\u0000\u00ff\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0095\u0001\u0000\u0000\u005a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0094\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00a0\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0001\u0000\u00fe\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u009d\u0001\u0000\u0000\u003a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0098\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00a4\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0002\u0000\u00fd\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00a1\u0001\u0000\u0000\u004a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00a0\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00ac\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0003\u0000\u00fc\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0003\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00a9\u0001\u0000\u0000\u00aa\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00ac\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00b8\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0004\u0000\u00fb\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00b5\u0001\u0000\u0000\u00c2\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00b8\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00c4\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0005\u0000\u00fa\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0005\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00c1\u0001\u0000\u0000\u0062\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00c0\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00cc\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0006\u0000\u00f9\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0006\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00c9\u0001\u0000\u0000\u00a2\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00cc\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00d8\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0007\u0000\u00f8\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0007\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00d5\u0001\u0000\u0000\u00ba\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00d8\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00e4\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0008\u0000\u00f7\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0008\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0001\u0000\u0000\u004a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e0\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00ec\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0009\u0000\u00f6\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u0009\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e9\u0001\u0000\u0000\u004a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e8\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u00f4\u0001\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\n\u0000\u00f5\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\n\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00f1\u0001\u0000\u0000\u008a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00f4\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0000\u0002\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u000b\u0000\u00f4\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u000b\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00fd\u0001\u0000\u0000\u0052\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00fc\u0001\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0008\u0002\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u000c\u0000\u00f3\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u000c\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0005\u0002\u0000\u0000\u006a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0004\u0002\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0010\u0002\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\r\u0000\u00f2\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\r\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\r\u0002\u0000\u0000\u00fa\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0014\u0002\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0020\u0002\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u000e\u0000\u00f1\u00ff\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0001\u0000\u000e\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u001d\u0002\u0000\u0000\u004a\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u001c\u0002\u0000\u0000\u0003\u0000\u0001\u0000" +
   "\u0028\u0002\u0000\u0000\u0002\u0000\u0001\u0000" +
   "\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c" +
   "\u004f\u0066\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0048\u0044\u00e8\u00c1\u00e6\u00c1\u000e\u00fc" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u006c\u0065\u006e\u0067\u0074\u0068\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00ec\u006f\u00df\u0005\u00c1\u00c9\u00bf\u00b6" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0068\u0061\u0073\u0068\u0043\u006f\u0064\u0065" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00ec\u006f\u00df\u0005\u00c1\u00c9\u00bf\u00b6" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0073\u0074\u0061\u0072\u0074\u0073\u0042\u0065" +
   "\u0066\u006f\u0072\u0065\u0044\u0069\u0073\u006a" +
   "\u006f\u0069\u006e\u0074\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0073\u0074\u0061\u0072\u0074\u0073\u0042\u0065" +
   "\u0066\u006f\u0072\u0065\u004e\u006f\u006e\u0044" +
   "\u0069\u0073\u006a\u006f\u0069\u006e\u0074\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0073\u0074\u0061\u0072\u0074\u0073\u0041\u0066" +
   "\u0074\u0065\u0072\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0073\u0074\u0061\u0072\u0074\u0073\u0041\u0066" +
   "\u0074\u0065\u0072\u0044\u0069\u0073\u006a\u006f" +
   "\u0069\u006e\u0074\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0073\u0074\u0061\u0072\u0074\u0073\u0041\u0066" +
   "\u0074\u0065\u0072\u004e\u006f\u006e\u0044\u0069" +
   "\u0073\u006a\u006f\u0069\u006e\u0074\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0064\u0069\u0073\u006a\u006f\u0069\u006e\u0074" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0061\u0064\u006a\u0061\u0063\u0065\u006e\u0074" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0070\u0072\u006f\u0070\u0065\u0072\u006c\u0079" +
   "\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0073" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u00e1\u0020\u006d\u007d\u0077\u0013\u00c7\u008c" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u006d\u0065\u0074\u0068\u0055\u006e\u0069\u006f" +
   "\u006e\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u009e\u00a5\u0075\u0090\u00f6\u0082\u00b7\u00ca" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0069\u006e\u0074\u0065\u0072\u0073\u0065\u0063" +
   "\u0074\u0069\u006f\u006e\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u009e\u00a5\u0075\u0090\u00f6\u0082\u00b7\u00ca" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e" +
   "\u0063\u0065\u004e\u006f\u0074\u0050\u0072\u006f" +
   "\u0070\u0065\u0072\u006c\u0079\u0043\u006f\u006e" +
   "\u0074\u0061\u0069\u006e\u0065\u0064\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u009e\u00a5\u0075\u0090\u00f6\u0082\u00b7\u00ca" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0074\u006f\u0053\u0074\u0072\u0069\u006e\u0067" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u009c\u0068\u0036\u005e\u0097\u00db\u009f\u00ec" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
   "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" + "");
}
}

